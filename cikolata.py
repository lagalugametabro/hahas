import base64

# Base64 şifreli Python kodu
encoded_code = '''

'''

# Base64 şifreyi çözme
decoded_code = base64.b64decode(encoded_code).decode()

# Çözülmüş Python kodunu çalıştırma
exec(decoded_code)
