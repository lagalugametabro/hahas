import base64

# Base64 şifreli Python kodu
encoded_code = '''
aW1wb3J0IG9zDQppbXBvcnQganNvbg0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YQ0KaW1wb3J0IHJlcXVlc3RzDQpmcm9tIHJpY2guY29uc29sZSBpbXBvcnQgQ29uc29sZQ0KZnJvbSByaWNoLnBhbmVsIGltcG9ydCBQYW5lbA0KZnJvbSByaWNoLnByb21wdCBpbXBvcnQgUHJvbXB0DQpmcm9tIHJpY2gudGFibGUgaW1wb3J0IFRhYmxlDQpmcm9tIHJpY2gucHJldHR5IGltcG9ydCBQcmV0dHkNCg0KY29uc29sZSA9IENvbnNvbGUoKQ0KDQojID09PSBEZcSfacWfdGlyaWxlY2VrIGlmYWRlbGVyID09PQ0KS0VMSU1FX0RFR0lTVElSID0gew0KICAgICJzb3dpeCI6ICJoYXNhbmJhYmFzxLFrZXIiLA0KICAgICJTb3dpeCI6ICJoYXNhbmJhYmFzxLFrZXIiLA0KICAgICJoZXhub3giOiAiaGFzYW5iYWJhc8Sxa2VyIiwNCiAgICAiSGV4bm94IjogImhhc2FuYmFiYXPEsWtlciIsDQogICAgImhleGhveCI6ICJoYXNhbmJhYmFzxLFrZXIiLA0KICAgICJIZXhob3giOiAiaGFzYW5iYWJhc8Sxa2VyIiwNCiAgICAidC5tZS8iOiAidC5tZS9oYXNhbmJhYmFnZyINCn0NCg0KIyBMaXNhbnMgZG9zeWFzxLFuxLFuIGFkxLENCkxJU0FOU19ET1NZQVNJID0gImxpY2Vuc2VfZGF0YS5qc29uIg0KDQojIExpc2FucyBnZcOnZXJsaWxpayBzw7xyZXNpICg3IGfDvG4pDQpTVVJFID0gdGltZWRlbHRhKGRheXM9NykNCg0KIyBEb8SfcnUgxZ9pZnJleWkgYnVyYXlhIGtveQ0KRE/EnlJVX8WexLBGUkUgPSAiYmV0w7xsw7xudHVydW5jdXB1c3N5IiAgIyBCdSDFn2lmcmV5aSBzYWRlY2Ugc2VuIGJpbGVjZWtzaW4NCg0KZGVmIHRlbWl6bGVfdmVyaSh2ZXJpKToNCiAgICBpZiBpc2luc3RhbmNlKHZlcmksIGRpY3QpOg0KICAgICAgICByZXR1cm4ge2s6IHRlbWl6bGVfdmVyaSh2KSBmb3IgaywgdiBpbiB2ZXJpLml0ZW1zKCl9DQogICAgZWxpZiBpc2luc3RhbmNlKHZlcmksIGxpc3QpOg0KICAgICAgICByZXR1cm4gW3RlbWl6bGVfdmVyaShpdGVtKSBmb3IgaXRlbSBpbiB2ZXJpXQ0KICAgIGVsaWYgaXNpbnN0YW5jZSh2ZXJpLCBzdHIpOg0KICAgICAgICBmb3IgZXNraSwgeWVuaSBpbiBLRUxJTUVfREVHSVNUSVIuaXRlbXMoKToNCiAgICAgICAgICAgIHZlcmkgPSB2ZXJpLnJlcGxhY2UoZXNraSwgeWVuaSkNCiAgICAgICAgcmV0dXJuIHZlcmkNCiAgICBlbHNlOg0KICAgICAgICByZXR1cm4gdmVyaQ0KDQpkZWYgc29yZ3VfeWFwKGFwaV9hZGksIHVybCwgcGFyYW1ldHJlbGVyPU5vbmUpOg0KICAgIGNvbnNvbGUucnVsZShmIltib2xkIGdyZWVuXXthcGlfYWRpfSIpDQogICAgdHJ5Og0KICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwsIHBhcmFtcz1wYXJhbWV0cmVsZXIpDQogICAgICAgIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoNCiAgICAgICAgICAgIGpzb25fZGF0YSA9IHJlc3BvbnNlLmpzb24oKQ0KICAgICAgICAgICAgdGVtaXpsZW5taXMgPSB0ZW1pemxlX3ZlcmkoanNvbl9kYXRhKQ0KICAgICAgICAgICAgY29uc29sZS5wcmludChQcmV0dHkodGVtaXpsZW5taXMsIGV4cGFuZF9hbGw9VHJ1ZSkpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBjb25zb2xlLnByaW50KGYiW3JlZF3inYwgSGF0YSB7cmVzcG9uc2Uuc3RhdHVzX2NvZGV9OiB7cmVzcG9uc2UudGV4dH0iKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgY29uc29sZS5wcmludChmIltib2xkIHJlZF3imqDvuI8gxLBzdGlzbmE6Wy9ib2xkIHJlZF0ge3N0cihlKX0iKQ0KDQojIExpc2FucyBkb8SfcnVsYW1hIGZvbmtzaXlvbnUNCmRlZiBsaXNhbnNfZG9ncnVsYW1hKCk6DQogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKExJU0FOU19ET1NZQVNJKToNCiAgICAgICAgIyDEsGxrIMOnYWzEscWfdMSxcm1hOiBsaXNhbnMgZG9zeWFzxLFuxLEgb2x1xZ90dXINCiAgICAgICAgd2l0aCBvcGVuKExJU0FOU19ET1NZQVNJLCAidyIpIGFzIGY6DQogICAgICAgICAgICBsaWNlbnNlX2RhdGEgPSB7J3N0YXJ0X2RhdGUnOiBkYXRldGltZS5ub3coKS5pc29mb3JtYXQoKX0NCiAgICAgICAgICAgIGpzb24uZHVtcChsaWNlbnNlX2RhdGEsIGYpDQogICAgICAgIGNvbnNvbGUucHJpbnQoIltib2xkIGdyZWVuXUxpc2FucyBiYcWfbGF0xLFsZMSxIVsvYm9sZCBncmVlbl0iKQ0KICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgd2l0aCBvcGVuKExJU0FOU19ET1NZQVNJLCAiciIpIGFzIGY6DQogICAgICAgIGxpY2Vuc2VfZGF0YSA9IGpzb24ubG9hZChmKQ0KDQogICAgdHJ5Og0KICAgICAgICBzdGFydF9kYXRlID0gZGF0ZXRpbWUuZnJvbWlzb2Zvcm1hdChsaWNlbnNlX2RhdGFbJ3N0YXJ0X2RhdGUnXSkNCiAgICBleGNlcHQgRXhjZXB0aW9uOg0KICAgICAgICBjb25zb2xlLnByaW50KCJbYm9sZCByZWRdTGlzYW5zIGRvc3lhc8SxIGJvenVsbXXFnyFbL2JvbGQgcmVkXSIpDQogICAgICAgIHJldHVybiBGYWxzZQ0KDQogICAgc3VhbiA9IGRhdGV0aW1lLm5vdygpDQogICAgaWYgc3VhbiAtIHN0YXJ0X2RhdGUgPiBTVVJFOg0KICAgICAgICBjb25zb2xlLnByaW50KCJbYm9sZCByZWRdTGlzYW5zIHPDvHJlc2kgZG9sbXXFnyFbL2JvbGQgcmVkXSIpDQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIGVsc2U6DQogICAgICAgIGthbGFuX3N1cmUgPSBTVVJFIC0gKHN1YW4gLSBzdGFydF9kYXRlKQ0KICAgICAgICBjb25zb2xlLnByaW50KGYiW2JvbGQgZ3JlZW5dTGlzYW5zIGdlw6dlcmxpISBLYWxhbiBzw7xyZToge2thbGFuX3N1cmUuZGF5c30gZ8O8blsvYm9sZCBncmVlbl0iKQ0KICAgICAgICByZXR1cm4gVHJ1ZQ0KDQojIExpc2FucyBzw7xyZXNpbmkgeWVuaWRlbiBiYcWfbGF0bWEgKMWfaWZyZXlsZSkNCmRlZiB5ZW5pbGVfbGlzYW5zKCk6DQogICAgc2lmcmUgPSBQcm9tcHQuYXNrKCJMaXNhbnMgc8O8cmVzaW5pIHllbmlsZW1layBpw6dpbiDFn2lmcmV5aSBnaXJpbiIpDQogICAgaWYgc2lmcmUgPT0gRE/EnlJVX8WexLBGUkU6DQogICAgICAgIHdpdGggb3BlbihMSVNBTlNfRE9TWUFTSSwgInciKSBhcyBmOg0KICAgICAgICAgICAgbGljZW5zZV9kYXRhID0geydzdGFydF9kYXRlJzogZGF0ZXRpbWUubm93KCkuaXNvZm9ybWF0KCl9DQogICAgICAgICAgICBqc29uLmR1bXAobGljZW5zZV9kYXRhLCBmKQ0KICAgICAgICBjb25zb2xlLnByaW50KCJbYm9sZCBncmVlbl1MaXNhbnMgc8O8cmVzaSB5ZW5pZGVuIGJhxZ9sYXTEsWxkxLEhWy9ib2xkIGdyZWVuXSIpDQogICAgICAgIHJldHVybiBUcnVlDQogICAgZWxzZToNCiAgICAgICAgY29uc29sZS5wcmludCgiW2JvbGQgcmVkXVlhbmzEscWfIMWfaWZyZSEgTGlzYW5zIHPDvHJlc2kgeWVuaWxlbm1lZGkuWy9ib2xkIHJlZF0iKQ0KICAgICAgICByZXR1cm4gRmFsc2UNCg0KIyBBbmEgbWVuw7wNCmRlZiBhbmFfbWVudSgpOg0KICAgICMgw5ZuY2UgbGlzYW5zIGtvbnRyb2zDvA0KICAgIGlmIG5vdCBsaXNhbnNfZG9ncnVsYW1hKCk6DQogICAgICAgIHllbmlkZW4gPSBQcm9tcHQuYXNrKCJMaXNhbnMgc8O8cmVzaW5pIHllbmlkZW4gYmHFn2xhdG1hayBpc3RlciBtaXNpbml6PyIsIGNob2ljZXM9WyJFdmV0IiwiSGF5xLFyIl0pDQogICAgICAgIGlmIHllbmlkZW4ubG93ZXIoKSA9PSAiZXZldCI6DQogICAgICAgICAgICBpZiBub3QgeWVuaWxlX2xpc2FucygpOg0KICAgICAgICAgICAgICAgIGNvbnNvbGUucHJpbnQoIltib2xkIHJlZF1VeWd1bGFtYSBrYXBhdMSxbMSxeW9yLi4uWy9ib2xkIHJlZF0iKQ0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgY29uc29sZS5wcmludCgiW2JvbGQgcmVkXVV5Z3VsYW1hIGthcGF0xLFsxLF5b3IuLi5bL2JvbGQgcmVkXSIpDQogICAgICAgICAgICByZXR1cm4NCg0KICAgICMgTGlzYW5zIGdlw6dlcmxpeXNlIGRldmFtDQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgY29uc29sZS5wcmludChQYW5lbC5maXQoIvCfjJAgW2JvbGQgY3lhbl1IYXNhbiBiYWJhIGXFn2l0dGlyIGFsbGFoIHBhbmVsWy9ib2xkIGN5YW5dIPCfjJAiLCBzdHlsZT0iYm9sZCBtYWdlbnRhIikpDQoNCiAgICAgICAgdGFibGUgPSBUYWJsZShzaG93X2hlYWRlcj1UcnVlLCBoZWFkZXJfc3R5bGU9ImJvbGQgYmx1ZSIpDQogICAgICAgIHRhYmxlLmFkZF9jb2x1bW4oIlNlw6dpbSIsIGp1c3RpZnk9ImNlbnRlciIpDQogICAgICAgIHRhYmxlLmFkZF9jb2x1bW4oIsSwxZ9sZW0iKQ0KICAgICAgICB0YWJsZS5hZGRfcm93KCIxIiwgIkFkIFNveWFkICsgxLBsL8SwbMOnZSBTb3JndSIpDQogICAgICAgIHRhYmxlLmFkZF9yb3coIjIiLCAiVGVsZWdyYW0gS3VsbGFuxLFjxLEgQWTEsSIpDQogICAgICAgIHRhYmxlLmFkZF9yb3coIjMiLCAiVEMgaWxlIMOHb2tsdSBTb3JndSIpDQogICAgICAgIHRhYmxlLmFkZF9yb3coIjQiLCAiR1NNIGlsZSBTb3JndSIpDQogICAgICAgIHRhYmxlLmFkZF9yb3coIjUiLCAiW3JlZF3Dh8Sxa8SxxZ8iKQ0KICAgICAgICBjb25zb2xlLnByaW50KHRhYmxlKQ0KDQogICAgICAgIHNlY2ltID0gUHJvbXB0LmFzaygiW2JvbGQgeWVsbG93XUJpciBzZcOnaW0geWFwxLFuWy9ib2xkIHllbGxvd10iLCBjaG9pY2VzPVsiMSIsICIyIiwgIjMiLCAiNCIsICI1Il0pDQoNCiAgICAgICAgaWYgc2VjaW0gPT0gIjEiOg0KICAgICAgICAgICAgYWQgPSBQcm9tcHQuYXNrKCJBZCIpDQogICAgICAgICAgICBzb3lhZCA9IFByb21wdC5hc2soIlNveWFkIikNCiAgICAgICAgICAgIGlsID0gUHJvbXB0LmFzaygixLBsIChpc3RlxJ9lIGJhxJ9sxLEpIiwgZGVmYXVsdD0iIikNCiAgICAgICAgICAgIHVybCA9ICJodHRwczovL2FwaS5oZXhub3gucHJvL3Nvd2l4YXBpL2Fkc295YWRpbGNlLnBocCIgaWYgaWwgZWxzZSAiaHR0cHM6Ly9hcGkuaGV4bm94LnByby9zb3dpeGFwaS9hZHNveWFkaWxpY2UucGhwIg0KICAgICAgICAgICAgcGFyYW1zID0geyJhZCI6IGFkLCAic295YWQiOiBzb3lhZH0NCiAgICAgICAgICAgIGlmIGlsOiBwYXJhbXNbImlsIl0gPSBpbA0KICAgICAgICAgICAgc29yZ3VfeWFwKCJBZCBTb3lhZCArIMSwbC/EsGzDp2UiLCB1cmwsIHBhcmFtcykNCg0KICAgICAgICBlbGlmIHNlY2ltID09ICIyIjoNCiAgICAgICAgICAgIHVzZXJuYW1lID0gUHJvbXB0LmFzaygiVGVsZWdyYW0gS3VsbGFuxLFjxLEgQWTEsSIpDQogICAgICAgICAgICBzb3JndV95YXAoIlRlbGVncmFtIiwgImh0dHBzOi8vYXBpLmhleG5veC5wcm8vc293aXhhcGkvdGVsZWdyYW1fc29yZ3UucGhwIiwgeyJ1c2VybmFtZSI6IHVzZXJuYW1lfSkNCg0KICAgICAgICBlbGlmIHNlY2ltID09ICIzIjoNCiAgICAgICAgICAgIHRjID0gUHJvbXB0LmFzaygiVEMgS2ltbGlrIE5vIikNCiAgICAgICAgICAgIHRjX2FwaV9saXN0ID0gew0KICAgICAgICAgICAgICAgICJHZW5lbCBCaWxnaSI6ICJodHRwczovL2FwaS5oZXhub3gucHJvL3Nvd2l4YXBpL3RjcHJvLnBocCIsDQogICAgICAgICAgICAgICAgIlRhcHUgQmlsZ2lzaSI6ICJodHRwczovL2FwaS5oZXhub3gucHJvL3Nvd2l4YXBpL3RhcHUucGhwIiwNCiAgICAgICAgICAgICAgICAiT2t1bCBObyI6ICJodHRwczovL2FwaS5oZXhub3gucHJvL3Nvd2l4YXBpL29rdWxuby5waHAiLA0KICAgICAgICAgICAgICAgICLEsMWfeWVyaSBZZXRraWxpIjogImh0dHBzOi8vYXBpLmhleG5veC5wcm8vc293aXhhcGkvaXN5ZXJpeWV0a2lsaS5waHAiLA0KICAgICAgICAgICAgICAgICJIYW5lIEJpbGdpc2kiOiAiaHR0cHM6Ly9hcGkuaGV4bm94LnByby9zb3dpeGFwaS9oYW5lLnBocCIsDQogICAgICAgICAgICAgICAgIkFubmUgQmlsZ2lzaSI6ICJodHRwczovL2FwaS5oZXhub3gucHJvL3Nvd2l4YXBpL2FubmUucGhwIiwNCiAgICAgICAgICAgICAgICAiQmFiYSBCaWxnaXNpIjogImh0dHBzOi8vYXBpLmhleG5veC5wcm8vc293aXhhcGkvYmFiYS5waHAiLA0KICAgICAgICAgICAgICAgICJBZHJlcyBCaWxnaXNpIjogImh0dHBzOi8vYXBpLmhleG5veC5wcm8vc293aXhhcGkvYWRyZXMucGhwIiwNCiAgICAgICAgICAgICAgICAiQWlsZSBCaWxnaXNpIjogImh0dHBzOi8vYXBpLmhleG5veC5wcm8vc293aXhhcGkvYWlsZS5waHAiDQogICAgICAgICAgICB9DQogICAgICAgICAgICBmb3IgYXBpX2FkaSwgdXJsIGluIHRjX2FwaV9saXN0Lml0ZW1zKCk6DQogICAgICAgICAgICAgICAgc29yZ3VfeWFwKGFwaV9hZGksIHVybCwgeyJ0YyI6IHRjfSkNCg0KICAgICAgICBlbGlmIHNlY2ltID09ICI0IjoNCiAgICAgICAgICAgIGdzbSA9IFByb21wdC5hc2soIkdTTSBOdW1hcmFzxLEiKQ0KICAgICAgICAgICAgc29yZ3VfeWFwKCJHU00gU29yZ3UiLCAiaHR0cHM6Ly9hcGkuaGV4bm94LnByby9zb3dpeGFwaS9nc20ucGhwIiwgeyJnc20iOiBnc219KQ0KICAgICAgICAgICAgc29yZ3VfeWFwKCJHU00gRGV0YXkiLCAiaHR0cHM6Ly9hcGkuaGV4bm94LnByby9zb3dpeGFwaS9nc21kZXRheS5waHAiLCB7ImdzbSI6IGdzbX0pDQoNCiAgICAgICAgZWxzZTogICMgc2VjaW0gPT0gIjUiDQogICAgICAgICAgICBjb25zb2xlLnByaW50KCJbYm9sZCByZWRdw4fEsWvEsWzEsXlvci4uLlsvYm9sZCByZWRdIikNCiAgICAgICAgICAgIGJyZWFrDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgYW5hX21lbnUoKQ==
'''

# Base64 şifreyi çözme
decoded_code = base64.b64decode(encoded_code).decode()

# Çözülmüş Python kodunu çalıştırma
exec(decoded_code)
